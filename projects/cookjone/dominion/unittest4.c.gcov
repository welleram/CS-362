        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failureCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
        -:   12:void assertTrue(int a, int b) {
        5:   13:    if (a == b) {
        5:   14:        printf("Test: PASSED\n");
        5:   15:    }
        -:   16:    else {
    #####:   17:        printf("Test: FAILED\n");
    #####:   18:        failureCount++;
        -:   19:    }
        5:   20:}
        -:   21:
        -:   22:// runs the tests
        -:   23:int main () {
        -:   24:    // kingdom cards
        1:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   26:               remodel, smithy, village, baron, great_hall};
        1:   27:    int seed = 2000;
        -:   28:    struct gameState state;
        -:   29:
        1:   30:    printf("Testing -> gainCard()\n");
        1:   31:    memset(&state,23,sizeof(struct gameState));
        1:   32:    initializeGame(2, k, seed, &state);
        -:   33:
        1:   34:    printf("\nGold supply pile is empty\n");
        1:   35:    state.supplyCount[gold] = 0;
        1:   36:    assertTrue(gainCard(gold,&state,0,0),-1);
        1:   37:    state.supplyCount[gold] = 30;
        -:   38:
        1:   39:    printf("\nAdd card to deck\n");
        1:   40:    int deckCount = state.deckCount[0];
        1:   41:    gainCard(gold,&state,1,0);
        1:   42:    assertTrue(deckCount+1,state.deckCount[0]);
        -:   43:
        1:   44:    printf("\nAdd card to hand\n");
        1:   45:    int handCount = state.handCount[0];
        1:   46:    gainCard(gold,&state,2,0);
        1:   47:    assertTrue(handCount+1,state.handCount[0]);
        -:   48:
        1:   49:    printf("\nAdd card to discard pile\n");
        1:   50:    int discardCount = state.discardCount[0];
        1:   51:    gainCard(gold,&state,0,0);
        1:   52:    assertTrue(discardCount+1,state.discardCount[0]);
        -:   53:
        1:   54:    printf("\nDecrease gold supply\n");
        1:   55:    int goldSupply = state.supplyCount[gold];
        1:   56:    gainCard(gold,&state,0,0);
        1:   57:    assertTrue(goldSupply-1,state.supplyCount[gold]);
        -:   58:
        1:   59:    if (failureCount) {
    #####:   60:        printf("\nTEST FAILED\n");
    #####:   61:        printf("Fails: %d\n",failureCount);
    #####:   62:    }
        -:   63:    else {
        1:   64:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   65:    }
        -:   66:
        1:   67:    return 0;
        -:   68:}
