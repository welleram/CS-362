        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:int failureCount = 0;
        -:    9:
        -:   10:void assertTrue(int a, int b) {
        5:   11:    if (a == b) {
        5:   12:        printf("Test: PASSED\n");
        5:   13:    }
        -:   14:    else {
    #####:   15:        printf("Test: FAILED\n");
    #####:   16:        failureCount++;
        -:   17:    }
        5:   18:}
        -:   19:
        -:   20:int main () {
        1:   21:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   22:               remodel, smithy, village, baron, great_hall};
        1:   23:    int seed = 2000;
        -:   24:    struct gameState state;
        -:   25:
        1:   26:    printf("Testing -> gainCard()\n");
        1:   27:    memset(&state,23,sizeof(struct gameState));
        1:   28:    initializeGame(2, k, seed, &state);
        -:   29:
        1:   30:    printf("\nGold supply pile is empty\n");
        1:   31:    state.supplyCount[gold] = 0;
        1:   32:    assertTrue(gainCard(gold,&state,0,0),-1);
        1:   33:    state.supplyCount[gold] = 30;
        -:   34:
        1:   35:    printf("\nAdd card to deck\n");
        1:   36:    int deckCount = state.deckCount[0];
        1:   37:    gainCard(gold,&state,1,0);
        1:   38:    assertTrue(deckCount+1,state.deckCount[0]);
        -:   39:
        1:   40:    printf("\nAdd card to hand\n");
        1:   41:    int handCount = state.handCount[0];
        1:   42:    gainCard(gold,&state,2,0);
        1:   43:    assertTrue(handCount+1,state.handCount[0]);
        -:   44:
        1:   45:    printf("\nAdd card to discard pile\n");
        1:   46:    int discardCount = state.discardCount[0];
        1:   47:    gainCard(gold,&state,0,0);
        1:   48:    assertTrue(discardCount+1,state.discardCount[0]);
        -:   49:
        1:   50:    printf("\nDecrease gold supply\n");
        1:   51:    int goldSupply = state.supplyCount[gold];
        1:   52:    gainCard(gold,&state,0,0);
        1:   53:    assertTrue(goldSupply-1,state.supplyCount[gold]);
        -:   54:
        1:   55:    if (failureCount) {
    #####:   56:        printf("\nTEST FAILED\n");
    #####:   57:        printf("Fails: %d\n",failureCount);
    #####:   58:    }
        -:   59:    else {
        1:   60:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   61:    }
        -:   62:
        1:   63:    return 0;
        -:   64:}
