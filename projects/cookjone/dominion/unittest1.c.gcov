        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:int failureCount = 0;
        -:    9:
        -:   10:void assertTrue(int a, int b) {
        6:   11:    if (a == b) {
        6:   12:        printf("Test: PASSED\n");
        6:   13:    }
        -:   14:    else {
    #####:   15:        printf("Test: FAILED\n");
    #####:   16:        failureCount++;
        -:   17:    }
        6:   18:}
        -:   19:
        -:   20:
        -:   21:int main () {
        -:   22:    int i, b;
        1:   23:    int numbPlayers = 2;
        1:   24:    int player = 0;
        1:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   26:               remodel, smithy, village, baron, great_hall};
        1:   27:    int seed = 2000;
        -:   28:    struct gameState state;
        -:   29:    int handCount;
        1:   30:    int bonus = 1;
        -:   31:
        -:   32:    int coppers[MAX_HAND];
        -:   33:    int silvers[MAX_HAND];
        -:   34:    int golds[MAX_HAND];
        -:   35:
     1002:   36:    for (i = 0; i < MAX_HAND; i++) {
      500:   37:        coppers[i] = copper;
      500:   38:        silvers[i] = silver;
      500:   39:        golds[i] = gold;
      500:   40:    }
        -:   41:
        1:   42:    printf("Testing -> updateCoins()");
        -:   43:
        6:   44:    for (handCount = 0; handCount <= 5; handCount = handCount + 5) {
        2:   45:        printf("\n\nTreasure cards: %d\n",handCount);
        2:   46:        printf("Bonus: %d\n", bonus);
        -:   47:
        2:   48:        memset(&state,23,sizeof(struct gameState));
        2:   49:        b = initializeGame(numbPlayers, k, seed, &state);
        2:   50:        state.handCount[player] = handCount;
        -:   51:
        2:   52:        memcpy(state.hand[player],coppers,sizeof(int)*handCount);
        2:   53:        updateCoins(player,&state,bonus);
        -:   54:
        2:   55:        printf("\nCoin Count - copper\n");
        2:   56:        printf("Actual: %d\n",state.coins);
        2:   57:        printf("Expected: %d\n",handCount*1+bonus);
        -:   58:
        2:   59:        assertTrue(state.coins,handCount*1+bonus);
        -:   60:
        2:   61:        memcpy(state.hand[player],silvers,sizeof(int)*handCount);
        2:   62:        updateCoins(player,&state,bonus);
        -:   63:
        2:   64:        printf("\nCoin Count - silver\n");
        2:   65:        printf("Actual: %d\n",state.coins);
        2:   66:        printf("Expected: %d\n",handCount*2+bonus);
        -:   67:
        2:   68:        assertTrue(state.coins,handCount*2+bonus);
        -:   69:
        2:   70:        memcpy(state.hand[player],golds,sizeof(int)*handCount);
        2:   71:        updateCoins(player,&state,bonus);
        -:   72:
        2:   73:        printf("\nCoin Count - gold\n");
        2:   74:        printf("Actual: %d\n",state.coins);
        2:   75:        printf("Expected: %d\n",handCount*3+bonus);
        -:   76:
        2:   77:        assertTrue(state.coins,handCount*3+bonus);
        -:   78:
        2:   79:        bonus = bonus + 2;
        2:   80:    }
        -:   81:
        1:   82:    if (failureCount) {
    #####:   83:        printf("\nTEST FAILED\n");
    #####:   84:        printf("Fails: %d\n",failureCount);
    #####:   85:    }
        -:   86:    else {
        1:   87:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   88:    }
        -:   89:
        1:   90:    return 0;
        -:   91:}
