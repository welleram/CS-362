        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failureCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
        -:   12:void assertTrue(int a, int b) {
       18:   13:    if (a == b) {
       17:   14:        printf("Test: PASSED\n");
       17:   15:    }
        -:   16:    else {
        1:   17:        printf("Test: FAILED\n");
        1:   18:        failureCount++;
        -:   19:    }
       18:   20:}
        -:   21:
        -:   22:// runs the tests
        -:   23:int main () {
        -:   24:    int i;
        1:   25:    int numbPlayers = 2;
        1:   26:    int player0 = 0;
        1:   27:    int player1 = 1;
        -:   28:
        1:   29:    int handpos = 0;
        1:   30:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   31:    int bonus = 0;
        -:   32:
        -:   33:    // kingdom cards
        1:   34:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   35:               remodel, smithy, village, baron, great_hall};
        -:   36:
        1:   37:    int seed = 2000;
        -:   38:    struct gameState state, stateOriginal;
        -:   39:
        1:   40:    printf("Testing -> villageCard()\n");
        1:   41:    memset(&state,23,sizeof(struct gameState));
        1:   42:    memset(&stateOriginal,23,sizeof(struct gameState));
        -:   43:
        -:   44:    // create the game state
        1:   45:    initializeGame(numbPlayers, k, seed, &state);
        -:   46:
        -:   47:    // copy it to preserve it
        1:   48:    memcpy(&stateOriginal, &state, sizeof(struct gameState));
        -:   49:
        1:   50:    cardEffect(village, choice1, choice2, choice3, &state, handpos, &bonus);
        -:   51:
        1:   52:    printf("\nPlayer0 gains 1 card\n");
        1:   53:    assertTrue(state.handCount[player0],stateOriginal.handCount[player0]);
        -:   54:
        1:   55:    printf("\nPlayer0 gains 1 card from his own pile\n");
        1:   56:    assertTrue(state.deckCount[player0],stateOriginal.deckCount[player0]-1);
        -:   57:
        1:   58:    printf("\nPlayer0 gains two actions\n");
        1:   59:    assertTrue(state.numActions,stateOriginal.numActions+2);
        -:   60:
        1:   61:    printf("\nNo change to victory card piles\n");
        1:   62:    printf("Province Pile\n");
        1:   63:    assertTrue(state.supplyCount[province],stateOriginal.supplyCount[province]);
        1:   64:    printf("Duchy Pile\n");
        1:   65:    assertTrue(state.supplyCount[duchy],stateOriginal.supplyCount[duchy]);
        1:   66:    printf("Estate Pile\n");
        1:   67:    assertTrue(state.supplyCount[estate],stateOriginal.supplyCount[estate]);
        -:   68:
        1:   69:    printf("\nPlayer1 was not affected\n");
        1:   70:    printf("Hand Count\n");
        1:   71:    assertTrue(state.handCount[player1],stateOriginal.handCount[player1]);
        1:   72:    printf("Deck Count\n");
        1:   73:    assertTrue(state.deckCount[player1],stateOriginal.deckCount[player1]);
        -:   74:
        1:   75:    printf("\nNo change to kingdom card piles\n");
       22:   76:    for (i = 0; i < 10; i++) {
       10:   77:        printf("checking card piles...\n");
       10:   78:        assertTrue(state.supplyCount[k[i]],stateOriginal.supplyCount[k[i]]);
       10:   79:    }
        -:   80:
        1:   81:    if (failureCount) {
        1:   82:        printf("\nTEST FAILED\n");
        1:   83:        printf("Fails: %d\n",failureCount);
        1:   84:    }
        -:   85:    else {
    #####:   86:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   87:    }
        -:   88:
        1:   89:    return 0;
        -:   90:}
