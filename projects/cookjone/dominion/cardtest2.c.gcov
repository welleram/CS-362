        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:int failureCount = 0;
        -:    9:
        -:   10:void assertTrue(int a, int b) {
       17:   11:    if (a == b) {
       15:   12:        printf("Test: PASSED\n");
       15:   13:    }
        -:   14:    else {
        2:   15:        printf("Test: FAILED\n");
        2:   16:        failureCount++;
        -:   17:    }
       17:   18:}
        -:   19:
        -:   20:
        -:   21:int main () {
        -:   22:    int i;
        1:   23:    int numbPlayers = 2;
        1:   24:    int player0 = 0;
        1:   25:    int player1 = 1;
        -:   26:
        1:   27:    int handpos = 0;
        1:   28:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   29:    int bonus = 0;
        -:   30:
        1:   31:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   32:               remodel, smithy, village, baron, great_hall};
        -:   33:
        1:   34:    int seed = 2000;
        -:   35:    struct gameState state, stateOriginal;
        -:   36:
        1:   37:    printf("Testing -> smithyCard()\n");
        1:   38:    memset(&state,23,sizeof(struct gameState));
        1:   39:    memset(&stateOriginal,23,sizeof(struct gameState));
        1:   40:    initializeGame(numbPlayers, k, seed, &state);
        1:   41:    memcpy(&stateOriginal, &state, sizeof(struct gameState));
        -:   42:
        1:   43:    cardEffect(smithy, choice1, choice2, choice3, &state, handpos, &bonus);
        -:   44:
        1:   45:    printf("\nPlayer0 gains 3 cards\n");
        1:   46:    assertTrue(state.handCount[player0],stateOriginal.handCount[player0]+2);
        -:   47:
        1:   48:    printf("\nPlayer0 gains 3 cards from his own pile\n");
        1:   49:    assertTrue(state.deckCount[player0],stateOriginal.deckCount[player0]-3);
        -:   50:
        1:   51:    printf("\nNo change to victory card piles\n");
        1:   52:    printf("Province Pile\n");
        1:   53:    assertTrue(state.supplyCount[province],stateOriginal.supplyCount[province]);
        1:   54:    printf("Duchy Pile\n");
        1:   55:    assertTrue(state.supplyCount[duchy],stateOriginal.supplyCount[duchy]);
        1:   56:    printf("Estate Pile\n");
        1:   57:    assertTrue(state.supplyCount[estate],stateOriginal.supplyCount[estate]);
        -:   58:
        1:   59:    printf("\nNo change to kingdom card piles\n");
       22:   60:    for (i = 0; i < 10; i++) {
       10:   61:        printf("checking card piles...\n");
       10:   62:        assertTrue(state.supplyCount[k[i]],stateOriginal.supplyCount[k[i]]);
       10:   63:    }
        -:   64:
        1:   65:    printf("\nPlayer1 was not affected\n");
        1:   66:    printf("Hand Count\n");
        1:   67:    assertTrue(state.handCount[player1],stateOriginal.handCount[player1]);
        1:   68:    printf("Deck Count\n");
        1:   69:    assertTrue(state.deckCount[player1],stateOriginal.deckCount[player1]);
        -:   70:
        1:   71:    if (failureCount) {
        1:   72:        printf("\nTEST FAILED\n");
        1:   73:        printf("Fails: %d\n",failureCount);
        1:   74:    }
        -:   75:    else {
    #####:   76:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   77:    }
        -:   78:
        1:   79:    return 0;
        -:   80:}
