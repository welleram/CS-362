        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      280:    9:        if (*(int*)a > *(int*)b)
    #####:   10:                return 1;
      280:   11:        if (*(int*)a < *(int*)b)
      100:   12:                return -1;
      180:   13:        return 0;
      280:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:        struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:        return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:        int* k = malloc(10 * sizeof(int));
    #####:   24:        k[0] = k1;
    #####:   25:        k[1] = k2;
    #####:   26:        k[2] = k3;
    #####:   27:        k[3] = k4;
    #####:   28:        k[4] = k5;
    #####:   29:        k[5] = k6;
    #####:   30:        k[6] = k7;
    #####:   31:        k[7] = k8;
    #####:   32:        k[8] = k9;
    #####:   33:        k[9] = k10;
    #####:   34:        return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:        int i;
        -:   41:        int j;
        -:   42:        int it;
        -:   43:        //set up random number generator
        9:   44:        SelectStream(1);
        9:   45:        PutSeed((long)randomSeed);
        -:   46:
        -:   47:        //check number of players
       18:   48:        if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:        {
    #####:   50:                return -1;
        -:   51:        }
        -:   52:
        -:   53:        //set number of players
        9:   54:        state->numPlayers = numPlayers;
        -:   55:
        -:   56:        //check selected kingdom cards are different
      198:   57:        for (i = 0; i < 10; i++)
        -:   58:        {
     1980:   59:                for (j = 0; j < 10; j++)
        -:   60:                {
     1710:   61:                        if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:                        {
    #####:   63:                                return -1;
        -:   64:                        }
      900:   65:                }
       90:   66:        }
        -:   67:
        -:   68:
        -:   69:        //initialize supply
        -:   70:        ///////////////////////////////
        -:   71:
        -:   72:        //set number of Curse cards
        9:   73:        if (numPlayers == 2)
        -:   74:        {
        9:   75:                state->supplyCount[curse] = 10;
        9:   76:        }
    #####:   77:        else if (numPlayers == 3)
        -:   78:        {
    #####:   79:                state->supplyCount[curse] = 20;
    #####:   80:        }
        -:   81:        else
        -:   82:        {
    #####:   83:                state->supplyCount[curse] = 30;
        -:   84:        }
        -:   85:
        -:   86:        //set number of Victory cards
        9:   87:        if (numPlayers == 2)
        -:   88:        {
        9:   89:                state->supplyCount[estate] = 8;
        9:   90:                state->supplyCount[duchy] = 8;
        9:   91:                state->supplyCount[province] = 8;
        9:   92:        }
        -:   93:        else
        -:   94:        {
    #####:   95:                state->supplyCount[estate] = 12;
    #####:   96:                state->supplyCount[duchy] = 12;
    #####:   97:                state->supplyCount[province] = 12;
        -:   98:        }
        -:   99:
        -:  100:        //set number of Treasure cards
        9:  101:        state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:        state->supplyCount[silver] = 40;
        9:  103:        state->supplyCount[gold] = 30;
        -:  104:
        -:  105:        //set number of Kingdom cards
      378:  106:        for (i = adventurer; i <= treasure_map; i++)  //loop all cards
        -:  107:        {
     2970:  108:                for (j = 0; j < 10; j++)    //loop chosen cards
        -:  109:                {
     1395:  110:                        if (kingdomCards[j] == i)
        -:  111:                        {
        -:  112:                                //check if card is a 'Victory' Kingdom card
      171:  113:                                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                                {
       18:  115:                                        if (numPlayers == 2) {
       18:  116:                                                state->supplyCount[i] = 8;
       18:  117:                                        }
    #####:  118:                                        else{ state->supplyCount[i] = 12; }
       18:  119:                                }
        -:  120:                                else
        -:  121:                                {
       72:  122:                                        state->supplyCount[i] = 10;
        -:  123:                                }
       90:  124:                                break;
        -:  125:                        }
        -:  126:                        else //card is not in the set choosen for the game
        -:  127:                        {
     1305:  128:                                state->supplyCount[i] = -1;
        -:  129:                        }
     1305:  130:                }
        -:  131:
      180:  132:        }
        -:  133:
        -:  134:        ////////////////////////
        -:  135:        //supply intilization complete
        -:  136:
        -:  137:        //set player decks
       54:  138:        for (i = 0; i < numPlayers; i++)
        -:  139:        {
       18:  140:                state->deckCount[i] = 0;
      144:  141:                for (j = 0; j < 3; j++)
        -:  142:                {
       54:  143:                        state->deck[i][j] = estate;
       54:  144:                        state->deckCount[i]++;
       54:  145:                }
      288:  146:                for (j = 3; j < 10; j++)
        -:  147:                {
      126:  148:                        state->deck[i][j] = copper;
      126:  149:                        state->deckCount[i]++;
      126:  150:                }
       18:  151:        }
        -:  152:
        -:  153:        //shuffle player decks
       54:  154:        for (i = 0; i < numPlayers; i++)
        -:  155:        {
       18:  156:                if ( shuffle(i, state) < 0 )
        -:  157:                {
    #####:  158:                        return -1;
        -:  159:                }
       18:  160:        }
        -:  161:
        -:  162:        //draw player hands
       54:  163:        for (i = 0; i < numPlayers; i++)
        -:  164:        {
        -:  165:                //initialize hand size to zero
       18:  166:                state->handCount[i] = 0;
       18:  167:                state->discardCount[i] = 0;
        -:  168:                //draw 5 cards
        -:  169:                // for (j = 0; j < 5; j++)
        -:  170:                //	{
        -:  171:                //	  drawCard(i, state);
        -:  172:                //	}
       18:  173:        }
        -:  174:
        -:  175:        //set embargo tokens to 0 for all supply piles
      504:  176:        for (i = 0; i <= treasure_map; i++)
        -:  177:        {
      243:  178:                state->embargoTokens[i] = 0;
      243:  179:        }
        -:  180:
        -:  181:        //initialize first player's turn
        9:  182:        state->outpostPlayed = 0;
        9:  183:        state->phase = 0;
        9:  184:        state->numActions = 1;
        9:  185:        state->numBuys = 1;
        9:  186:        state->playedCardCount = 0;
        9:  187:        state->whoseTurn = 0;
        9:  188:        state->handCount[state->whoseTurn] = 0;
        -:  189:        //int it; move to top
        -:  190:
        -:  191:        //Moved draw cards to here, only drawing at the start of a turn
      108:  192:        for (it = 0; it < 5; it++) {
       45:  193:                drawCard(state->whoseTurn, state);
       45:  194:        }
        -:  195:
        9:  196:        updateCoins(state->whoseTurn, state, 0);
        -:  197:
        9:  198:        return 0;
        9:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:        int newDeck[MAX_DECK];
       21:  205:        int newDeckPos = 0;
        -:  206:        int card;
        -:  207:        int i;
        -:  208:
       21:  209:        if (state->deckCount[player] < 1)
        1:  210:                return -1;
       20:  211:        qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:        /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      440:  214:        while (state->deckCount[player] > 0) {
      200:  215:                card = floor(Random() * state->deckCount[player]);
      200:  216:                newDeck[newDeckPos] = state->deck[player][card];
      200:  217:                newDeckPos++;
     1494:  218:                for (i = card; i < state->deckCount[player]-1; i++) {
      547:  219:                        state->deck[player][i] = state->deck[player][i+1];
      547:  220:                }
      200:  221:                state->deckCount[player]--;
        -:  222:        }
      440:  223:        for (i = 0; i < newDeckPos; i++) {
      200:  224:                state->deck[player][i] = newDeck[i];
      200:  225:                state->deckCount[player]++;
      200:  226:        }
        -:  227:
       20:  228:        return 0;
       21:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:        int card;
    #####:  234:        int coin_bonus = 0; //tracks coins gain from actions
        -:  235:
        -:  236:        //check if it is the right phase
    #####:  237:        if (state->phase != 0)
        -:  238:        {
    #####:  239:                return -1;
        -:  240:        }
        -:  241:
        -:  242:        //check if player has enough actions
    #####:  243:        if ( state->numActions < 1 )
        -:  244:        {
    #####:  245:                return -1;
        -:  246:        }
        -:  247:
        -:  248:        //get card played
    #####:  249:        card = handCard(handPos, state);
        -:  250:
        -:  251:        //check if selected card is an action
    #####:  252:        if ( card < adventurer || card > treasure_map )
        -:  253:        {
    #####:  254:                return -1;
        -:  255:        }
        -:  256:
        -:  257:        //play card
    #####:  258:        if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:        {
    #####:  260:                return -1;
        -:  261:        }
        -:  262:
        -:  263:        //reduce number of actions
    #####:  264:        state->numActions--;
        -:  265:
        -:  266:        //update coins (Treasure cards may be added with card draws)
    #####:  267:        updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:        return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:        int who;
        -:  274:        if (DEBUG) {
        -:  275:                printf("Entering buyCard...\n");
        -:  276:        }
        -:  277:
        -:  278:        // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:        who = state->whoseTurn;
        -:  281:
    #####:  282:        if (state->numBuys < 1) {
        -:  283:                if (DEBUG)
        -:  284:                        printf("You do not have any buys left\n");
    #####:  285:                return -1;
    #####:  286:        } else if (supplyCount(supplyPos, state) <1) {
        -:  287:                if (DEBUG)
        -:  288:                        printf("There are not any of that type of card left\n");
    #####:  289:                return -1;
    #####:  290:        } else if (state->coins < getCost(supplyPos)) {
        -:  291:                if (DEBUG)
        -:  292:                        printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:                return -1;
        -:  294:        } else {
    #####:  295:                state->phase=1;
        -:  296:                //state->supplyCount[supplyPos]--;
    #####:  297:                gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:                state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:                state->numBuys--;
        -:  301:                if (DEBUG)
        -:  302:                        printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:        }
        -:  304:
        -:  305:        //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:        //state->discardCount[who]++;
        -:  307:
    #####:  308:        return 0;
    #####:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:        return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:        int currentPlayer = whoseTurn(state);
    #####:  317:        return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
        5:  321:        return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:        int i;
    #####:  326:        int count = 0;
        -:  327:
    #####:  328:        for (i = 0; i < state->deckCount[player]; i++)
        -:  329:        {
    #####:  330:                if (state->deck[player][i] == card) count++;
    #####:  331:        }
        -:  332:
    #####:  333:        for (i = 0; i < state->handCount[player]; i++)
        -:  334:        {
    #####:  335:                if (state->hand[player][i] == card) count++;
    #####:  336:        }
        -:  337:
    #####:  338:        for (i = 0; i < state->discardCount[player]; i++)
        -:  339:        {
    #####:  340:                if (state->discard[player][i] == card) count++;
    #####:  341:        }
        -:  342:
    #####:  343:        return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
        4:  347:        return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:        int k;
        -:  352:        int i;
    #####:  353:        int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:        //Discard hand
    #####:  356:        for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  357:                state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:                state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:        }
    #####:  360:        state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:        //Code for determining the player
    #####:  363:        if (currentPlayer < (state->numPlayers - 1)) {
    #####:  364:                state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:        }
        -:  366:        else{
    #####:  367:                state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:        }
        -:  369:
    #####:  370:        state->outpostPlayed = 0;
    #####:  371:        state->phase = 0;
    #####:  372:        state->numActions = 1;
    #####:  373:        state->coins = 0;
    #####:  374:        state->numBuys = 1;
    #####:  375:        state->playedCardCount = 0;
    #####:  376:        state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:        //int k; move to top
        -:  379:        //Next player draws hand
    #####:  380:        for (k = 0; k < 5; k++) {
    #####:  381:                drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:        }
        -:  383:
        -:  384:        //Update money
    #####:  385:        updateCoins(state->whoseTurn, state, 0);
        -:  386:
    #####:  387:        return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:        int i;
        -:  392:        int j;
        -:  393:
        -:  394:        //if stack of Province cards is empty, the game ends
        3:  395:        if (state->supplyCount[province] == 0)
        -:  396:        {
        1:  397:                return 1;
        -:  398:        }
        -:  399:
        -:  400:        //if three supply pile are at 0, the game ends
        2:  401:        j = 0;
      104:  402:        for (i = 0; i < 25; i++)
        -:  403:        {
       50:  404:                if (state->supplyCount[i] == 0)
        -:  405:                {
        3:  406:                        j++;
        3:  407:                }
       50:  408:        }
        2:  409:        if ( j >= 3)
        -:  410:        {
        1:  411:                return 1;
        -:  412:        }
        -:  413:
        1:  414:        return 0;
        3:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:        int i;
    #####:  420:        int score = 0;
        -:  421:        //score from hand
    #####:  422:        for (i = 0; i < state->handCount[player]; i++)
        -:  423:        {
    #####:  424:                if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:                if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:                if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:                if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:                if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:                if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:        }
        -:  431:
        -:  432:        //score from discard
    #####:  433:        for (i = 0; i < state->discardCount[player]; i++)
        -:  434:        {
    #####:  435:                if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:                if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:                if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:                if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:                if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:                if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:        }
        -:  442:
        -:  443:        //score from deck
    #####:  444:        for (i = 0; i < state->discardCount[player]; i++)
        -:  445:        {
    #####:  446:                if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:                if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:                if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:                if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:                if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:                if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:        }
        -:  453:
    #####:  454:        return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:        int i;
        -:  459:        int j;
        -:  460:        int highScore;
        -:  461:        int currentPlayer;
        -:  462:
        -:  463:        //get score for each player
    #####:  464:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:        {
        -:  466:                //set unused player scores to -9999
    #####:  467:                if (i >= state->numPlayers)
        -:  468:                {
    #####:  469:                        players[i] = -9999;
    #####:  470:                }
        -:  471:                else
        -:  472:                {
    #####:  473:                        players[i] = scoreFor (i, state);
        -:  474:                }
    #####:  475:        }
        -:  476:
        -:  477:        //find highest score
    #####:  478:        j = 0;
    #####:  479:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:        {
    #####:  481:                if (players[i] > players[j])
        -:  482:                {
    #####:  483:                        j = i;
    #####:  484:                }
    #####:  485:        }
    #####:  486:        highScore = players[j];
        -:  487:
        -:  488:        //add 1 to players who had less turns
    #####:  489:        currentPlayer = whoseTurn(state);
    #####:  490:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:        {
    #####:  492:                if ( players[i] == highScore && i > currentPlayer )
        -:  493:                {
    #####:  494:                        players[i]++;
    #####:  495:                }
    #####:  496:        }
        -:  497:
        -:  498:        //find new highest score
    #####:  499:        j = 0;
    #####:  500:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:        {
    #####:  502:                if ( players[i] > players[j] )
        -:  503:                {
    #####:  504:                        j = i;
    #####:  505:                }
    #####:  506:        }
    #####:  507:        highScore = players[j];
        -:  508:
        -:  509:        //set winners in array to 1 and rest to 0
    #####:  510:        for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:        {
    #####:  512:                if ( players[i] == highScore )
        -:  513:                {
    #####:  514:                        players[i] = 1;
    #####:  515:                }
        -:  516:                else
        -:  517:                {
    #####:  518:                        players[i] = 0;
        -:  519:                }
    #####:  520:        }
        -:  521:
    #####:  522:        return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{
        -:  527:        int count;
        -:  528:        int deckCounter;
       59:  529:        if (state->deckCount[player] <= 0) {//Deck is empty
        -:  530:
        -:  531:                //Step 1 Shuffle the discard pile back into a deck
        -:  532:                int i;
        -:  533:                //Move discard to deck
    #####:  534:                for (i = 0; i < state->discardCount[player]; i++) {
    #####:  535:                        state->deck[player][i] = state->discard[player][i];
    #####:  536:                        state->discard[player][i] = -1;
    #####:  537:                }
        -:  538:
    #####:  539:                state->deckCount[player] = state->discardCount[player];
    #####:  540:                state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:                //Shufffle the deck
    #####:  543:                shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:
        -:  545:                if (DEBUG) {//Debug statements
        -:  546:                        printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:                }
        -:  548:
    #####:  549:                state->discardCount[player] = 0;
        -:  550:
        -:  551:                //Step 2 Draw Card
    #####:  552:                count = state->handCount[player];//Get current player's hand count
        -:  553:
        -:  554:                if (DEBUG) {//Debug statements
        -:  555:                        printf("Current hand count: %d\n", count);
        -:  556:                }
        -:  557:
    #####:  558:                deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    #####:  560:                if (deckCounter == 0)
    #####:  561:                        return -1;
        -:  562:
    #####:  563:                state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:                state->deckCount[player]--;
    #####:  565:                state->handCount[player]++;//Increment hand count
    #####:  566:        }
        -:  567:
        -:  568:        else{
       59:  569:                int count = state->handCount[player];//Get current hand count for player
        -:  570:                int deckCounter;
        -:  571:                if (DEBUG) {//Debug statements
        -:  572:                        printf("Current hand count: %d\n", count);
        -:  573:                }
        -:  574:
       59:  575:                deckCounter = state->deckCount[player];//Create holder for the deck count
       59:  576:                state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       59:  577:                state->deckCount[player]--;
       59:  578:                state->handCount[player]++;//Increment hand count
        -:  579:        }
        -:  580:
       59:  581:        return 0;
       59:  582:}
        -:  583:
        -:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:        switch( cardNumber )
        -:  587:        {
        -:  588:        case curse:
    #####:  589:                return 0;
        -:  590:        case estate:
    #####:  591:                return 2;
        -:  592:        case duchy:
    #####:  593:                return 5;
        -:  594:        case province:
    #####:  595:                return 8;
        -:  596:        case copper:
    #####:  597:                return 0;
        -:  598:        case silver:
    #####:  599:                return 3;
        -:  600:        case gold:
    #####:  601:                return 6;
        -:  602:        case adventurer:
    #####:  603:                return 6;
        -:  604:        case council_room:
    #####:  605:                return 5;
        -:  606:        case feast:
    #####:  607:                return 4;
        -:  608:        case gardens:
    #####:  609:                return 4;
        -:  610:        case mine:
    #####:  611:                return 5;
        -:  612:        case remodel:
    #####:  613:                return 4;
        -:  614:        case smithy:
    #####:  615:                return 4;
        -:  616:        case village:
    #####:  617:                return 3;
        -:  618:        case baron:
    #####:  619:                return 4;
        -:  620:        case great_hall:
    #####:  621:                return 3;
        -:  622:        case minion:
    #####:  623:                return 5;
        -:  624:        case steward:
    #####:  625:                return 3;
        -:  626:        case tribute:
    #####:  627:                return 5;
        -:  628:        case ambassador:
    #####:  629:                return 3;
        -:  630:        case cutpurse:
    #####:  631:                return 4;
        -:  632:        case embargo:
    #####:  633:                return 2;
        -:  634:        case outpost:
    #####:  635:                return 5;
        -:  636:        case salvager:
    #####:  637:                return 4;
        -:  638:        case sea_hag:
    #####:  639:                return 4;
        -:  640:        case treasure_map:
    #####:  641:                return 4;
        -:  642:        }
        -:  643:
    #####:  644:        return -1;
    #####:  645:}
        -:  646:
        -:  647:
        -:  648:// Refactored card effects
        -:  649:void adventurerCard(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  650:  int cardDrawn;
        1:  651:  int drawntreasure = 0;
        -:  652:  // bug -> allows the player to reveal cards from their deck until they reveal 3 treasure cards, instead of only 2
        8:  653:  while(drawntreasure < 3) {
        3:  654:          if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  655:                  shuffle(currentPlayer, state);
    #####:  656:          }
        3:  657:          drawCard(currentPlayer, state);
        3:  658:          cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
        3:  659:          if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        3:  660:                  drawntreasure++;
        -:  661:          else{
    #####:  662:                  temphand[z] = cardDrawn;
    #####:  663:                  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  664:                  z++;
        -:  665:          }
        -:  666:  }
        2:  667:  while(z - 1 >= 0) {
    #####:  668:          state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:          z = z - 1;
        -:  670:  }
        1:  671:}
        -:  672:
        -:  673:
        -:  674:void smithyCard(int currentPlayer, int handPos, struct gameState *state){
        -:  675:  int i;
        -:  676:  //+3 Cards
        -:  677:  // bug -> allows the player to add 4 cards to their hand, instead of only 3
       10:  678:  for (i = 0; i < 4; i++)
        -:  679:  {
        4:  680:          drawCard(currentPlayer, state);
        4:  681:  }
        -:  682:
        -:  683:  //discard card from hand
        1:  684:  discardCard(handPos, currentPlayer, state, 0);
        1:  685:}
        -:  686:
        -:  687:
        -:  688:void council_roomCard(int currentPlayer, int handPos, struct gameState *state){
        -:  689:  int i;
        -:  690:  //+4 Cards
        -:  691:  // bug -> allows the player to add 5 cards to their hand, instead of only 4
       12:  692:  for (i = 0; i < 5; i++)
        -:  693:  {
        5:  694:          drawCard(currentPlayer, state);
        5:  695:  }
        -:  696:
        -:  697:  //+1 Buy
        1:  698:  state->numBuys++;
        -:  699:
        -:  700:  //Each other player draws a card
        6:  701:  for (i = 0; i < state->numPlayers; i++)
        -:  702:  {
        2:  703:          if ( i != currentPlayer )
        -:  704:          {
        1:  705:                  drawCard(i, state);
        1:  706:          }
        2:  707:  }
        -:  708:
        -:  709:  //put played card in played card pile
        1:  710:  discardCard(handPos, currentPlayer, state, 0);
        1:  711:}
        -:  712:
        -:  713:
        -:  714:void villageCard(int currentPlayer, int handPos, struct gameState *state){
        -:  715:  //+1 Card
        1:  716:  drawCard(currentPlayer, state);
        -:  717:
        -:  718:  //+2 Actions
        -:  719:  // bug -> adds 3 to a player's action count, instead of only 2
        1:  720:  state->numActions = state->numActions + 3;
        -:  721:
        -:  722:  //discard played card from hand
        1:  723:  discardCard(handPos, currentPlayer, state, 0);
        1:  724:}
        -:  725:
        -:  726:
        -:  727:void stewardCard(int currentPlayer, int handPos, int choice1, int choice2,
        -:  728:                 int choice3, struct gameState *state){
    #####:  729:  if (choice1 == 1)
        -:  730:  {
        -:  731:          //+2 cards
    #####:  732:          drawCard(currentPlayer, state);
    #####:  733:          drawCard(currentPlayer, state);
    #####:  734:  }
    #####:  735:  else if (choice1 == 2)
        -:  736:  {
        -:  737:          //+2 coins
    #####:  738:          state->coins = state->coins + 2;
    #####:  739:  }
        -:  740:  else
        -:  741:  {
        -:  742:          //trash 2 cards in hand
    #####:  743:          discardCard(choice2, currentPlayer, state, 1);
    #####:  744:          discardCard(choice3, currentPlayer, state, 1);
        -:  745:  }
        -:  746:
        -:  747:  //discard card from hand
    #####:  748:  discardCard(handPos, currentPlayer, state, 0);
    #####:  749:}
        -:  750:
        -:  751:
        -:  752:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  753:{
        -:  754:        int i;
        -:  755:        int j;
        -:  756:        int k;
        -:  757:        int x;
        -:  758:        int index;
        4:  759:        int currentPlayer = whoseTurn(state);
        4:  760:        int nextPlayer = currentPlayer + 1;
        -:  761:
        4:  762:        int tributeRevealedCards[2] = {-1, -1};
        -:  763:        int temphand[MAX_HAND];// moved above the if statement
        -:  764:        //int drawntreasure=0;
        -:  765:        //int cardDrawn;
        4:  766:        int z = 0;// this is the counter for the temp hand
        4:  767:        if (nextPlayer > (state->numPlayers - 1)) {
    #####:  768:                nextPlayer = 0;
    #####:  769:        }
        -:  770:
        -:  771:
        -:  772:        //uses switch to select card and perform actions
        4:  773:        switch( card )
        -:  774:        {
        -:  775:        case adventurer:
        1:  776:                adventurerCard(currentPlayer, temphand, z, state);
        1:  777:                return 0;
        -:  778:
        -:  779:        case council_room:
        1:  780:                council_roomCard(currentPlayer, handPos, state);
        1:  781:                return 0;
        -:  782:
        -:  783:        case feast:
        -:  784:                //gain card with cost up to 5
        -:  785:                //Backup hand
    #####:  786:                for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  787:                        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  788:                        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  789:                }
        -:  790:                //Backup hand
        -:  791:
        -:  792:                //Update Coins for Buy
    #####:  793:                updateCoins(currentPlayer, state, 5);
    #####:  794:                x = 1;//Condition to loop on
    #####:  795:                while( x == 1) {//Buy one card
    #####:  796:                        if (supplyCount(choice1, state) <= 0) {
        -:  797:                                if (DEBUG)
        -:  798:                                        printf("None of that card left, sorry!\n");
        -:  799:
        -:  800:                                if (DEBUG) {
        -:  801:                                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  802:                                }
    #####:  803:                        }
    #####:  804:                        else if (state->coins < getCost(choice1)) {
    #####:  805:                                printf("That card is too expensive!\n");
        -:  806:
        -:  807:                                if (DEBUG) {
        -:  808:                                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  809:                                }
    #####:  810:                        }
        -:  811:                        else{
        -:  812:
        -:  813:                                if (DEBUG) {
        -:  814:                                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  815:                                }
        -:  816:
    #####:  817:                                gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  818:                                x = 0;//No more buying cards
        -:  819:
        -:  820:                                if (DEBUG) {
        -:  821:                                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  822:                                }
        -:  823:
        -:  824:                        }
        -:  825:                }
        -:  826:
        -:  827:                //Reset Hand
    #####:  828:                for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####:  829:                        state->hand[currentPlayer][i] = temphand[i];
    #####:  830:                        temphand[i] = -1;
    #####:  831:                }
        -:  832:                //Reset Hand
        -:  833:
    #####:  834:                return 0;
        -:  835:
        -:  836:        case gardens:
    #####:  837:                return -1;
        -:  838:
        -:  839:        case mine:
    #####:  840:                j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  841:
    #####:  842:                if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  843:                {
    #####:  844:                        return -1;
        -:  845:                }
        -:  846:
    #####:  847:                if (choice2 > treasure_map || choice2 < curse)
        -:  848:                {
    #####:  849:                        return -1;
        -:  850:                }
        -:  851:
    #####:  852:                if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  853:                {
    #####:  854:                        return -1;
        -:  855:                }
        -:  856:
    #####:  857:                gainCard(choice2, state, 2, currentPlayer);
        -:  858:
        -:  859:                //discard card from hand
    #####:  860:                discardCard(handPos, currentPlayer, state, 0);
        -:  861:
        -:  862:                //discard trashed card
    #####:  863:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  864:                {
    #####:  865:                        if (state->hand[currentPlayer][i] == j)
        -:  866:                        {
    #####:  867:                                discardCard(i, currentPlayer, state, 0);
    #####:  868:                                break;
        -:  869:                        }
    #####:  870:                }
        -:  871:
    #####:  872:                return 0;
        -:  873:
        -:  874:        case remodel:
    #####:  875:                j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  876:
    #####:  877:                if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  878:                {
    #####:  879:                        return -1;
        -:  880:                }
        -:  881:
    #####:  882:                gainCard(choice2, state, 0, currentPlayer);
        -:  883:
        -:  884:                //discard card from hand
    #####:  885:                discardCard(handPos, currentPlayer, state, 0);
        -:  886:
        -:  887:                //discard trashed card
    #####:  888:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  889:                {
    #####:  890:                        if (state->hand[currentPlayer][i] == j)
        -:  891:                        {
    #####:  892:                                discardCard(i, currentPlayer, state, 0);
    #####:  893:                                break;
        -:  894:                        }
    #####:  895:                }
        -:  896:
        -:  897:
    #####:  898:                return 0;
        -:  899:
        -:  900:        case smithy:
        1:  901:                smithyCard(currentPlayer, handPos, state);
        1:  902:                return 0;
        -:  903:
        -:  904:        case village:
        1:  905:                villageCard(currentPlayer, handPos, state);
        1:  906:                return 0;
        -:  907:
        -:  908:        case baron:
    #####:  909:                state->numBuys++;//Increase buys by 1!
    #####:  910:                if (choice1 > 0) {//Boolean true or going to discard an estate
    #####:  911:                        int p = 0;//Iterator for hand!
    #####:  912:                        int card_not_discarded = 1;//Flag for discard set!
    #####:  913:                        while(card_not_discarded) {
    #####:  914:                                if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
    #####:  915:                                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  916:                                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  917:                                        state->discardCount[currentPlayer]++;
    #####:  918:                                        for (; p < state->handCount[currentPlayer]; p++) {
    #####:  919:                                                state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  920:                                        }
    #####:  921:                                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  922:                                        state->handCount[currentPlayer]--;
    #####:  923:                                        card_not_discarded = 0;//Exit the loop
    #####:  924:                                }
    #####:  925:                                else if (p > state->handCount[currentPlayer]) {
        -:  926:                                        if(DEBUG) {
        -:  927:                                                printf("No estate cards in your hand, invalid choice\n");
        -:  928:                                                printf("Must gain an estate if there are any\n");
        -:  929:                                        }
    #####:  930:                                        if (supplyCount(estate, state) > 0) {
    #####:  931:                                                gainCard(estate, state, 0, currentPlayer);
    #####:  932:                                                state->supplyCount[estate]--;//Decrement estates
    #####:  933:                                                if (supplyCount(estate, state) == 0) {
    #####:  934:                                                        isGameOver(state);
    #####:  935:                                                }
    #####:  936:                                        }
    #####:  937:                                        card_not_discarded = 0;//Exit the loop
    #####:  938:                                }
        -:  939:
        -:  940:                                else{
    #####:  941:                                        p++;//Next card
        -:  942:                                }
        -:  943:                        }
    #####:  944:                }
        -:  945:
        -:  946:                else{
    #####:  947:                        if (supplyCount(estate, state) > 0) {
    #####:  948:                                gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  949:                                state->supplyCount[estate]--;//Decrement Estates
    #####:  950:                                if (supplyCount(estate, state) == 0) {
    #####:  951:                                        isGameOver(state);
    #####:  952:                                }
    #####:  953:                        }
        -:  954:                }
        -:  955:
        -:  956:
    #####:  957:                return 0;
        -:  958:
        -:  959:        case great_hall:
        -:  960:                //+1 Card
    #####:  961:                drawCard(currentPlayer, state);
        -:  962:
        -:  963:                //+1 Actions
    #####:  964:                state->numActions++;
        -:  965:
        -:  966:                //discard card from hand
    #####:  967:                discardCard(handPos, currentPlayer, state, 0);
    #####:  968:                return 0;
        -:  969:
        -:  970:        case minion:
        -:  971:                //+1 action
    #####:  972:                state->numActions++;
        -:  973:
        -:  974:                //discard card from hand
    #####:  975:                discardCard(handPos, currentPlayer, state, 0);
        -:  976:
    #####:  977:                if (choice1) //+2 coins
        -:  978:                {
    #####:  979:                        state->coins = state->coins + 2;
    #####:  980:                }
        -:  981:
    #####:  982:                else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  983:                {
        -:  984:                        //discard hand
    #####:  985:                        while(numHandCards(state) > 0)
        -:  986:                        {
    #####:  987:                                discardCard(handPos, currentPlayer, state, 0);
        -:  988:                        }
        -:  989:
        -:  990:                        //draw 4
    #####:  991:                        for (i = 0; i < 4; i++)
        -:  992:                        {
    #####:  993:                                drawCard(currentPlayer, state);
    #####:  994:                        }
        -:  995:
        -:  996:                        //other players discard hand and redraw if hand size > 4
    #####:  997:                        for (i = 0; i < state->numPlayers; i++)
        -:  998:                        {
    #####:  999:                                if (i != currentPlayer)
        -: 1000:                                {
    #####: 1001:                                        if ( state->handCount[i] > 4 )
        -: 1002:                                        {
        -: 1003:                                                //discard hand
    #####: 1004:                                                while( state->handCount[i] > 0 )
        -: 1005:                                                {
    #####: 1006:                                                        discardCard(handPos, i, state, 0);
        -: 1007:                                                }
        -: 1008:
        -: 1009:                                                //draw 4
    #####: 1010:                                                for (j = 0; j < 4; j++)
        -: 1011:                                                {
    #####: 1012:                                                        drawCard(i, state);
    #####: 1013:                                                }
    #####: 1014:                                        }
    #####: 1015:                                }
    #####: 1016:                        }
        -: 1017:
    #####: 1018:                }
    #####: 1019:                return 0;
        -: 1020:
        -: 1021:        case steward:
    #####: 1022:                stewardCard(currentPlayer, handPos, choice1, choice2, choice3, state);
    #####: 1023:                return 0;
        -: 1024:
        -: 1025:        case tribute:
    #####: 1026:                if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1027:                        if (state->deckCount[nextPlayer] > 0) {
    #####: 1028:                                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:                                state->deckCount[nextPlayer]--;
    #####: 1030:                        }
    #####: 1031:                        else if (state->discardCount[nextPlayer] > 0) {
    #####: 1032:                                tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1033:                                state->discardCount[nextPlayer]--;
    #####: 1034:                        }
        -: 1035:                        else{
        -: 1036:                                //No Card to Reveal
        -: 1037:                                if (DEBUG) {
        -: 1038:                                        printf("No cards to reveal\n");
        -: 1039:                                }
        -: 1040:                        }
    #####: 1041:                }
        -: 1042:
        -: 1043:                else{
    #####: 1044:                        if (state->deckCount[nextPlayer] == 0) {
    #####: 1045:                                for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    #####: 1046:                                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1047:                                        state->deckCount[nextPlayer]++;
    #####: 1048:                                        state->discard[nextPlayer][i] = -1;
    #####: 1049:                                        state->discardCount[nextPlayer]--;
    #####: 1050:                                }
        -: 1051:
    #####: 1052:                                shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1053:                        }
    #####: 1054:                        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:                        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:                        state->deckCount[nextPlayer]--;
    #####: 1057:                        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:                        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:                        state->deckCount[nextPlayer]--;
        -: 1060:                }
        -: 1061:
    #####: 1062:                if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
    #####: 1063:                        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1064:                        state->playedCardCount++;
    #####: 1065:                        tributeRevealedCards[1] = -1;
    #####: 1066:                }
        -: 1067:
    #####: 1068:                for (i = 0; i <= 2; i++) {
    #####: 1069:                        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    #####: 1070:                                state->coins += 2;
    #####: 1071:                        }
        -: 1072:
    #####: 1073:                        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####: 1074:                                drawCard(currentPlayer, state);
    #####: 1075:                                drawCard(currentPlayer, state);
    #####: 1076:                        }
        -: 1077:                        else{//Action Card
    #####: 1078:                                state->numActions = state->numActions + 2;
        -: 1079:                        }
    #####: 1080:                }
        -: 1081:
    #####: 1082:                return 0;
        -: 1083:
        -: 1084:        case ambassador:
    #####: 1085:                j = 0; //used to check if player has enough cards to discard
        -: 1086:
    #####: 1087:                if (choice2 > 2 || choice2 < 0)
        -: 1088:                {
    #####: 1089:                        return -1;
        -: 1090:                }
        -: 1091:
    #####: 1092:                if (choice1 == handPos)
        -: 1093:                {
    #####: 1094:                        return -1;
        -: 1095:                }
        -: 1096:
    #####: 1097:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1098:                {
    #####: 1099:                        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1100:                        {
    #####: 1101:                                j++;
    #####: 1102:                        }
    #####: 1103:                }
    #####: 1104:                if (j < choice2)
        -: 1105:                {
    #####: 1106:                        return -1;
        -: 1107:                }
        -: 1108:
        -: 1109:                if (DEBUG)
        -: 1110:                        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1111:
        -: 1112:                //increase supply count for choosen card by amount being discarded
    #####: 1113:                state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1114:
        -: 1115:                //each other player gains a copy of revealed card
    #####: 1116:                for (i = 0; i < state->numPlayers; i++)
        -: 1117:                {
    #####: 1118:                        if (i != currentPlayer)
        -: 1119:                        {
    #####: 1120:                                gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1121:                        }
    #####: 1122:                }
        -: 1123:
        -: 1124:                //discard played card from hand
    #####: 1125:                discardCard(handPos, currentPlayer, state, 0);
        -: 1126:
        -: 1127:                //trash copies of cards returned to supply
    #####: 1128:                for (j = 0; j < choice2; j++)
        -: 1129:                {
    #####: 1130:                        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1131:                        {
    #####: 1132:                                if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1133:                                {
    #####: 1134:                                        discardCard(i, currentPlayer, state, 1);
    #####: 1135:                                        break;
        -: 1136:                                }
    #####: 1137:                        }
    #####: 1138:                }
        -: 1139:
    #####: 1140:                return 0;
        -: 1141:
        -: 1142:        case cutpurse:
    #####: 1143:                updateCoins(currentPlayer, state, 2);
    #####: 1144:                for (i = 0; i < state->numPlayers; i++)
        -: 1145:                {
    #####: 1146:                        if (i != currentPlayer)
        -: 1147:                        {
    #####: 1148:                                for (j = 0; j < state->handCount[i]; j++)
        -: 1149:                                {
    #####: 1150:                                        if (state->hand[i][j] == copper)
        -: 1151:                                        {
    #####: 1152:                                                discardCard(j, i, state, 0);
    #####: 1153:                                                break;
        -: 1154:                                        }
    #####: 1155:                                        if (j == state->handCount[i])
        -: 1156:                                        {
    #####: 1157:                                                for (k = 0; k < state->handCount[i]; k++)
        -: 1158:                                                {
        -: 1159:                                                        if (DEBUG)
        -: 1160:                                                                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1161:                                                }
    #####: 1162:                                                break;
        -: 1163:                                        }
    #####: 1164:                                }
        -: 1165:
    #####: 1166:                        }
        -: 1167:
    #####: 1168:                }
        -: 1169:
        -: 1170:                //discard played card from hand
    #####: 1171:                discardCard(handPos, currentPlayer, state, 0);
        -: 1172:
    #####: 1173:                return 0;
        -: 1174:
        -: 1175:
        -: 1176:        case embargo:
        -: 1177:                //+2 Coins
    #####: 1178:                state->coins = state->coins + 2;
        -: 1179:
        -: 1180:                //see if selected pile is in play
    #####: 1181:                if ( state->supplyCount[choice1] == -1 )
        -: 1182:                {
    #####: 1183:                        return -1;
        -: 1184:                }
        -: 1185:
        -: 1186:                //add embargo token to selected supply pile
    #####: 1187:                state->embargoTokens[choice1]++;
        -: 1188:
        -: 1189:                //trash card
    #####: 1190:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1191:                return 0;
        -: 1192:
        -: 1193:        case outpost:
        -: 1194:                //set outpost flag
    #####: 1195:                state->outpostPlayed++;
        -: 1196:
        -: 1197:                //discard card
    #####: 1198:                discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:                return 0;
        -: 1200:
        -: 1201:        case salvager:
        -: 1202:                //+1 buy
    #####: 1203:                state->numBuys++;
        -: 1204:
    #####: 1205:                if (choice1)
        -: 1206:                {
        -: 1207:                        //gain coins equal to trashed card
    #####: 1208:                        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1209:                        //trash card
    #####: 1210:                        discardCard(choice1, currentPlayer, state, 1);
    #####: 1211:                }
        -: 1212:
        -: 1213:                //discard card
    #####: 1214:                discardCard(handPos, currentPlayer, state, 0);
    #####: 1215:                return 0;
        -: 1216:
        -: 1217:        case sea_hag:
    #####: 1218:                for (i = 0; i < state->numPlayers; i++) {
    #####: 1219:                        if (i != currentPlayer) {
    #####: 1220:                                state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1221:                                state->deckCount[i]--;
    #####: 1222:                                state->discardCount[i]++;
    #####: 1223:                                state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1224:                        }
    #####: 1225:                }
    #####: 1226:                return 0;
        -: 1227:
        -: 1228:        case treasure_map:
        -: 1229:                //search hand for another treasure_map
    #####: 1230:                index = -1;
    #####: 1231:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1232:                {
    #####: 1233:                        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1234:                        {
    #####: 1235:                                index = i;
    #####: 1236:                                break;
        -: 1237:                        }
    #####: 1238:                }
    #####: 1239:                if (index > -1)
        -: 1240:                {
        -: 1241:                        //trash both treasure cards
    #####: 1242:                        discardCard(handPos, currentPlayer, state, 1);
    #####: 1243:                        discardCard(index, currentPlayer, state, 1);
        -: 1244:
        -: 1245:                        //gain 4 Gold cards
    #####: 1246:                        for (i = 0; i < 4; i++)
        -: 1247:                        {
    #####: 1248:                                gainCard(gold, state, 1, currentPlayer);
    #####: 1249:                        }
        -: 1250:
        -: 1251:                        //return success
    #####: 1252:                        return 1;
        -: 1253:                }
        -: 1254:
        -: 1255:                //no second treasure_map found in hand
    #####: 1256:                return -1;
        -: 1257:        }
        -: 1258:
    #####: 1259:        return -1;
        4: 1260:}
        -: 1261:
        -: 1262:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1263:{
        -: 1264:
        -: 1265:        //if card is not trashed, added to Played pile
        3: 1266:        if (trashFlag < 1)
        -: 1267:        {
        -: 1268:                //add card to played pile
        3: 1269:                state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1270:                state->playedCardCount++;
        3: 1271:        }
        -: 1272:
        -: 1273:        //set played card to -1
        3: 1274:        state->hand[currentPlayer][handPos] = -1;
        -: 1275:
        -: 1276:        //remove card from player's hand
        3: 1277:        if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1278:        {
        -: 1279:                //reduce number of cards in hand
    #####: 1280:                state->handCount[currentPlayer]--;
    #####: 1281:        }
        3: 1282:        else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1283:        {
        -: 1284:                //reduce number of cards in hand
    #####: 1285:                state->handCount[currentPlayer]--;
    #####: 1286:        }
        -: 1287:        else
        -: 1288:        {
        -: 1289:                //replace discarded card with last card in hand
        3: 1290:                state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1291:                //set last card to -1
        3: 1292:                state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1293:                //reduce number of cards in hand
        3: 1294:                state->handCount[currentPlayer]--;
        -: 1295:        }
        -: 1296:
        3: 1297:        return 0;
        -: 1298:}
        -: 1299:
        -: 1300:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1301:{
        -: 1302:        //Note: supplyPos is enum of choosen card
        -: 1303:
        -: 1304:        //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1305:        if ( supplyCount(supplyPos, state) < 1 )
        -: 1306:        {
        1: 1307:                return -1;
        -: 1308:        }
        -: 1309:
        -: 1310:        //added card for [whoseTurn] current player:
        -: 1311:        // toFlag = 0 : add to discard
        -: 1312:        // toFlag = 1 : add to deck
        -: 1313:        // toFlag = 2 : add to hand
        -: 1314:
        4: 1315:        if (toFlag == 1)
        -: 1316:        {
        1: 1317:                state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1318:                state->deckCount[player]++;
        1: 1319:        }
        3: 1320:        else if (toFlag == 2)
        -: 1321:        {
        1: 1322:                state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1323:                state->handCount[player]++;
        1: 1324:        }
        -: 1325:        else
        -: 1326:        {
        2: 1327:                state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1328:                state->discardCount[player]++;
        -: 1329:        }
        -: 1330:
        -: 1331:        //decrease number in supply pile
        4: 1332:        state->supplyCount[supplyPos]--;
        -: 1333:
        4: 1334:        return 0;
        5: 1335:}
        -: 1336:
        -: 1337:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1338:{
        -: 1339:        int i;
        -: 1340:
        -: 1341:        //reset coin count
       15: 1342:        state->coins = 0;
        -: 1343:
        -: 1344:        //add coins for each Treasure card in player's hand
      150: 1345:        for (i = 0; i < state->handCount[player]; i++)
        -: 1346:        {
       60: 1347:                if (state->hand[player][i] == copper)
        -: 1348:                {
       41: 1349:                        state->coins += 1;
       41: 1350:                }
       19: 1351:                else if (state->hand[player][i] == silver)
        -: 1352:                {
        5: 1353:                        state->coins += 2;
        5: 1354:                }
       14: 1355:                else if (state->hand[player][i] == gold)
        -: 1356:                {
        5: 1357:                        state->coins += 3;
        5: 1358:                }
       60: 1359:        }
        -: 1360:
        -: 1361:        //add bonus
       15: 1362:        state->coins += bonus;
        -: 1363:
       15: 1364:        return 0;
        -: 1365:}
        -: 1366:
        -: 1367:
        -: 1368://end of dominion.c
