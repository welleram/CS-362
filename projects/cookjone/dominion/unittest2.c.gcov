        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failureCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
        -:   12:void assertTrue(int a, int b) {
        3:   13:    if (a == b) {
        3:   14:        printf("Test: PASSED\n");
        3:   15:    }
        -:   16:    else {
    #####:   17:        printf("Test: FAILED\n");
    #####:   18:        failureCount++;
        -:   19:    }
        3:   20:}
        -:   21:
        -:   22:// runs the tests
        -:   23:int main () {
        1:   24:    int numbPlayers = 2;
        -:   25:
        -:   26:    // kingdom cards
        1:   27:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   28:               remodel, smithy, village, baron, great_hall};
        1:   29:    int seed = 2000;
        -:   30:    struct gameState state;
        -:   31:
        1:   32:    printf("Testing -> isGameOver()\n");
        -:   33:
        1:   34:    memset(&state,23,sizeof(struct gameState));
        1:   35:    initializeGame(numbPlayers, k, seed, &state);
        -:   36:
        1:   37:    state.supplyCount[province] = 0;
        -:   38:
        1:   39:    printf("\nProvince cards empty\n");
        1:   40:    assertTrue(isGameOver(&state),1);
        -:   41:
        1:   42:    state.supplyCount[province] = 1;
        -:   43:
        1:   44:    state.supplyCount[0] = 0;
        1:   45:    state.supplyCount[1] = 0;
        1:   46:    state.supplyCount[2] = 0;
        -:   47:
        1:   48:    printf("\nThree supply piles empty\n");
        1:   49:    assertTrue(isGameOver(&state),1);
        -:   50:
        1:   51:    state.supplyCount[0] = 1;
        1:   52:    state.supplyCount[1] = 1;
        1:   53:    state.supplyCount[2] = 1;
        -:   54:
        1:   55:    printf("\nProvince cards not empty\n");
        1:   56:    printf("\nThree supply piles not empty\n");
        1:   57:    assertTrue(isGameOver(&state),0);
        -:   58:
        1:   59:    if (failureCount) {
    #####:   60:        printf("\nTEST FAILED\n");
    #####:   61:        printf("Fails: %d\n",failureCount);
    #####:   62:    }
        -:   63:    else {
        1:   64:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   65:    }
        -:   66:
        1:   67:    return 0;
        -:   68:}
