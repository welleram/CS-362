        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failureCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
        -:   12:void assertTrue(int a, int b) {
        6:   13:    if (a == b) {
        6:   14:        printf("Test: PASSED\n");
        6:   15:    }
        -:   16:    else {
    #####:   17:        printf("Test: FAILED\n");
    #####:   18:        failureCount++;
        -:   19:    }
        6:   20:}
        -:   21:
        -:   22:// runs the tests
        -:   23:int main () {
        -:   24:    int i, b;
        1:   25:    int numbPlayers = 2;
        1:   26:    int player = 0;
        -:   27:
        -:   28:    // kingdom cards
        1:   29:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   30:               remodel, smithy, village, baron, great_hall};
        1:   31:    int seed = 2000;
        -:   32:    struct gameState state;
        -:   33:    int handCount;
        1:   34:    int bonus = 1;
        -:   35:
        -:   36:    int coppers[MAX_HAND];
        -:   37:    int silvers[MAX_HAND];
        -:   38:    int golds[MAX_HAND];
        -:   39:
        -:   40:    // arrays full of designated treasure
     1002:   41:    for (i = 0; i < MAX_HAND; i++) {
      500:   42:        coppers[i] = copper;
      500:   43:        silvers[i] = silver;
      500:   44:        golds[i] = gold;
      500:   45:    }
        -:   46:
        1:   47:    printf("Testing -> updateCoins()");
        -:   48:
        -:   49:    // test how updateCoins handles each treasure and a different bonus and hand count
        6:   50:    for (handCount = 0; handCount <= 5; handCount = handCount + 5) {
        2:   51:        printf("\n\nTreasure cards: %d\n",handCount);
        2:   52:        printf("Bonus: %d\n", bonus);
        -:   53:
        2:   54:        memset(&state,23,sizeof(struct gameState));
        2:   55:        b = initializeGame(numbPlayers, k, seed, &state);
        2:   56:        state.handCount[player] = handCount;
        -:   57:
        -:   58:        // fill hand with all coppers
        2:   59:        memcpy(state.hand[player],coppers,sizeof(int)*handCount);
        2:   60:        updateCoins(player,&state,bonus);
        -:   61:
        2:   62:        printf("\nCoin Count - copper\n");
        2:   63:        printf("Actual: %d\n",state.coins);
        2:   64:        printf("Expected: %d\n",handCount*1+bonus);
        -:   65:
        2:   66:        assertTrue(state.coins,handCount*1+bonus);
        -:   67:
        -:   68:        // fill hand with all silvers
        2:   69:        memcpy(state.hand[player],silvers,sizeof(int)*handCount);
        2:   70:        updateCoins(player,&state,bonus);
        -:   71:
        2:   72:        printf("\nCoin Count - silver\n");
        2:   73:        printf("Actual: %d\n",state.coins);
        2:   74:        printf("Expected: %d\n",handCount*2+bonus);
        -:   75:
        2:   76:        assertTrue(state.coins,handCount*2+bonus);
        -:   77:
        -:   78:        // fill hand with all golds
        2:   79:        memcpy(state.hand[player],golds,sizeof(int)*handCount);
        2:   80:        updateCoins(player,&state,bonus);
        -:   81:
        2:   82:        printf("\nCoin Count - gold\n");
        2:   83:        printf("Actual: %d\n",state.coins);
        2:   84:        printf("Expected: %d\n",handCount*3+bonus);
        -:   85:
        2:   86:        assertTrue(state.coins,handCount*3+bonus);
        -:   87:
        2:   88:        bonus = bonus + 2;
        2:   89:    }
        -:   90:
        1:   91:    if (failureCount) {
    #####:   92:        printf("\nTEST FAILED\n");
    #####:   93:        printf("Fails: %d\n",failureCount);
    #####:   94:    }
        -:   95:    else {
        1:   96:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   97:    }
        -:   98:
        1:   99:    return 0;
        -:  100:}
