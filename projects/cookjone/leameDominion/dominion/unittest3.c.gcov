        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:// global count of test failures
        -:    9:int failureCount = 0;
        -:   10:
        -:   11:// function to check if two ints are equal or not
        -:   12:void assertTrue(int a, int b) {
        3:   13:    if (a == b) {
        3:   14:        printf("Test: PASSED\n");
        3:   15:    }
        -:   16:    else {
    #####:   17:        printf("Test: FAILED\n");
    #####:   18:        failureCount++;
        -:   19:    }
        3:   20:}
        -:   21:
        -:   22:// runs the tests
        -:   23:int main () {
        1:   24:    int numbPlayers = 2;
        1:   25:    int player = 0;
        -:   26:
        -:   27:    // kingdom cards
        1:   28:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   29:               remodel, smithy, village, baron, great_hall};
        1:   30:    int seed = 2000;
        -:   31:    struct gameState state;
        -:   32:
        1:   33:    printf("Testing -> shuffle()\n");
        1:   34:    memset(&state,23,sizeof(struct gameState));
        1:   35:    initializeGame(numbPlayers, k, seed, &state);
        -:   36:
        1:   37:    state.deckCount[player] = 0;
        1:   38:    printf("\nPlayer deck count is 0\n");
        1:   39:    assertTrue(shuffle(player,&state),-1);
        -:   40:
        1:   41:    printf("\nPlayer deck count is 10 before and after shuffle\n");
        1:   42:    state.deckCount[player] = 10;
        1:   43:    shuffle(player,&state);
        1:   44:    assertTrue(state.deckCount[player],10);
        -:   45:
        1:   46:    printf("\nCards are shuffled\n");
        1:   47:    int pre_shuffle_card = state.deck[player][0];
        1:   48:    shuffle(player,&state);
        1:   49:    int post_shuffle_card = state.deck[player][0];
        1:   50:    if (pre_shuffle_card != post_shuffle_card) {
        1:   51:        assertTrue(1,1);
        1:   52:    }
        -:   53:    else {
    #####:   54:        assertTrue(0,1);
        -:   55:    }
        -:   56:
        1:   57:    if (failureCount) {
    #####:   58:        printf("\nTEST FAILED\n");
    #####:   59:        printf("Fails: %d\n",failureCount);
    #####:   60:    }
        -:   61:    else {
        1:   62:        printf("\nTEST SUCCESSFULLY COMPLETED\n\n");
        -:   63:    }
        -:   64:
        1:   65:    return 0;
        -:   66:}
